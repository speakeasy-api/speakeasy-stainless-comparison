/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetBookByIdRequest = {
    /**
     * ID of the book to return
     */
    bookId: number;
};

/**
 * A single book
 */
export type GetBookByIdResponseBody =
    | (components.ProgrammingBook & { category: "Programming" })
    | (components.FantasyBook & { category: "Fantasy" })
    | (components.SciFiBook & { category: "Sci-fi" });

export type GetBookByIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A single book
     */
    oneOf?:
        | (components.ProgrammingBook & { category: "Programming" })
        | (components.FantasyBook & { category: "Fantasy" })
        | (components.SciFiBook & { category: "Sci-fi" })
        | undefined;
};

/** @internal */
export namespace GetBookByIdRequest$ {
    export const inboundSchema: z.ZodType<GetBookByIdRequest, z.ZodTypeDef, unknown> = z
        .object({
            bookId: z.number().int(),
        })
        .transform((v) => {
            return {
                bookId: v.bookId,
            };
        });

    export type Outbound = {
        bookId: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBookByIdRequest> = z
        .object({
            bookId: z.number().int(),
        })
        .transform((v) => {
            return {
                bookId: v.bookId,
            };
        });
}

/** @internal */
export namespace GetBookByIdResponseBody$ {
    export const inboundSchema: z.ZodType<GetBookByIdResponseBody, z.ZodTypeDef, unknown> = z.union(
        [
            components.ProgrammingBook$.inboundSchema.and(
                z
                    .object({ category: z.literal("Programming") })
                    .transform((v) => ({ category: v.category }))
            ),
            components.FantasyBook$.inboundSchema.and(
                z
                    .object({ category: z.literal("Fantasy") })
                    .transform((v) => ({ category: v.category }))
            ),
            components.SciFiBook$.inboundSchema.and(
                z
                    .object({ category: z.literal("Sci-fi") })
                    .transform((v) => ({ category: v.category }))
            ),
        ]
    );

    export type Outbound =
        | (components.ProgrammingBook$.Outbound & { category: "Programming" })
        | (components.FantasyBook$.Outbound & { category: "Fantasy" })
        | (components.SciFiBook$.Outbound & { category: "Sci-fi" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBookByIdResponseBody> =
        z.union([
            components.ProgrammingBook$.outboundSchema.and(
                z
                    .object({ category: z.literal("Programming") })
                    .transform((v) => ({ category: v.category }))
            ),
            components.FantasyBook$.outboundSchema.and(
                z
                    .object({ category: z.literal("Fantasy") })
                    .transform((v) => ({ category: v.category }))
            ),
            components.SciFiBook$.outboundSchema.and(
                z
                    .object({ category: z.literal("Sci-fi") })
                    .transform((v) => ({ category: v.category }))
            ),
        ]);
}

/** @internal */
export namespace GetBookByIdResponse$ {
    export const inboundSchema: z.ZodType<GetBookByIdResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            oneOf: z
                .union([
                    components.ProgrammingBook$.inboundSchema.and(
                        z
                            .object({ category: z.literal("Programming") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    components.FantasyBook$.inboundSchema.and(
                        z
                            .object({ category: z.literal("Fantasy") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    components.SciFiBook$.inboundSchema.and(
                        z
                            .object({ category: z.literal("Sci-fi") })
                            .transform((v) => ({ category: v.category }))
                    ),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        oneOf?:
            | (components.ProgrammingBook$.Outbound & { category: "Programming" })
            | (components.FantasyBook$.Outbound & { category: "Fantasy" })
            | (components.SciFiBook$.Outbound & { category: "Sci-fi" })
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBookByIdResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            oneOf: z
                .union([
                    components.ProgrammingBook$.outboundSchema.and(
                        z
                            .object({ category: z.literal("Programming") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    components.FantasyBook$.outboundSchema.and(
                        z
                            .object({ category: z.literal("Fantasy") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    components.SciFiBook$.outboundSchema.and(
                        z
                            .object({ category: z.literal("Sci-fi") })
                            .transform((v) => ({ category: v.category }))
                    ),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.oneOf === undefined ? null : { oneOf: v.oneOf }),
            };
        });
}
