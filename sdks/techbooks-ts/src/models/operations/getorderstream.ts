/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EventStream } from "../../lib/event-streams";
import * as components from "../components";
import * as z from "zod";

export type GetOrderStreamResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A stream of orders
     */
    orderStreamMessage?: EventStream<components.OrderStreamMessage> | undefined;
};

/** @internal */
export namespace GetOrderStreamResponse$ {
    export const inboundSchema: z.ZodType<GetOrderStreamResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            OrderStreamMessage: z
                .instanceof(ReadableStream<Uint8Array>)
                .transform((stream) => {
                    return new EventStream({
                        stream,
                        decoder(rawEvent) {
                            const schema = components.OrderStreamMessage$.inboundSchema;
                            return schema.parse(rawEvent);
                        },
                    });
                })
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.OrderStreamMessage === undefined
                    ? null
                    : { orderStreamMessage: v.OrderStreamMessage }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        OrderStreamMessage?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrderStreamResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            orderStreamMessage: z.never().optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.orderStreamMessage === undefined
                    ? null
                    : { OrderStreamMessage: v.orderStreamMessage }),
            };
        });
}
