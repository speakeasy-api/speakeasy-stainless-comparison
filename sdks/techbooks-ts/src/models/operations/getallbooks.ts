/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type ResponseBody =
    | (components.ProgrammingBook & { category: "Programming" })
    | (components.FantasyBook & { category: "Fantasy" })
    | (components.SciFiBook & { category: "Sci-fi" });

export type GetAllBooksResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of books
     */
    responseBodies?:
        | Array<
              | (components.ProgrammingBook & { category: "Programming" })
              | (components.FantasyBook & { category: "Fantasy" })
              | (components.SciFiBook & { category: "Sci-fi" })
          >
        | undefined;
};

/** @internal */
export namespace ResponseBody$ {
    export const inboundSchema: z.ZodType<ResponseBody, z.ZodTypeDef, unknown> = z.union([
        components.ProgrammingBook$.inboundSchema.and(
            z
                .object({ category: z.literal("Programming") })
                .transform((v) => ({ category: v.category }))
        ),
        components.FantasyBook$.inboundSchema.and(
            z
                .object({ category: z.literal("Fantasy") })
                .transform((v) => ({ category: v.category }))
        ),
        components.SciFiBook$.inboundSchema.and(
            z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
        ),
    ]);

    export type Outbound =
        | (components.ProgrammingBook$.Outbound & { category: "Programming" })
        | (components.FantasyBook$.Outbound & { category: "Fantasy" })
        | (components.SciFiBook$.Outbound & { category: "Sci-fi" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResponseBody> = z.union([
        components.ProgrammingBook$.outboundSchema.and(
            z
                .object({ category: z.literal("Programming") })
                .transform((v) => ({ category: v.category }))
        ),
        components.FantasyBook$.outboundSchema.and(
            z
                .object({ category: z.literal("Fantasy") })
                .transform((v) => ({ category: v.category }))
        ),
        components.SciFiBook$.outboundSchema.and(
            z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
        ),
    ]);
}

/** @internal */
export namespace GetAllBooksResponse$ {
    export const inboundSchema: z.ZodType<GetAllBooksResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            responseBodies: z
                .array(
                    z.union([
                        components.ProgrammingBook$.inboundSchema.and(
                            z
                                .object({ category: z.literal("Programming") })
                                .transform((v) => ({ category: v.category }))
                        ),
                        components.FantasyBook$.inboundSchema.and(
                            z
                                .object({ category: z.literal("Fantasy") })
                                .transform((v) => ({ category: v.category }))
                        ),
                        components.SciFiBook$.inboundSchema.and(
                            z
                                .object({ category: z.literal("Sci-fi") })
                                .transform((v) => ({ category: v.category }))
                        ),
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.responseBodies === undefined ? null : { responseBodies: v.responseBodies }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        responseBodies?:
            | Array<
                  | (components.ProgrammingBook$.Outbound & { category: "Programming" })
                  | (components.FantasyBook$.Outbound & { category: "Fantasy" })
                  | (components.SciFiBook$.Outbound & { category: "Sci-fi" })
              >
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllBooksResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            responseBodies: z
                .array(
                    z.union([
                        components.ProgrammingBook$.outboundSchema.and(
                            z
                                .object({ category: z.literal("Programming") })
                                .transform((v) => ({ category: v.category }))
                        ),
                        components.FantasyBook$.outboundSchema.and(
                            z
                                .object({ category: z.literal("Fantasy") })
                                .transform((v) => ({ category: v.category }))
                        ),
                        components.SciFiBook$.outboundSchema.and(
                            z
                                .object({ category: z.literal("Sci-fi") })
                                .transform((v) => ({ category: v.category }))
                        ),
                    ])
                )
                .optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.responseBodies === undefined ? null : { responseBodies: v.responseBodies }),
            };
        });
}
