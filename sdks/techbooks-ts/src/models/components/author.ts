/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AuthorWithID = {
    id: number;
    name?: string | undefined;
    photo?: string | undefined;
    biography?: string | undefined;
};

export type AuthorWithName = {
    id?: number | undefined;
    name: string;
    photo?: string | undefined;
    biography?: string | undefined;
};

export type Author = AuthorWithName | AuthorWithID;

/** @internal */
export namespace AuthorWithID$ {
    export const inboundSchema: z.ZodType<AuthorWithID, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int(),
            name: z.string().optional(),
            photo: z.string().optional(),
            biography: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.biography === undefined ? null : { biography: v.biography }),
            };
        });

    export type Outbound = {
        id: number;
        name?: string | undefined;
        photo?: string | undefined;
        biography?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorWithID> = z
        .object({
            id: z.number().int(),
            name: z.string().optional(),
            photo: z.string().optional(),
            biography: z.string().optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.biography === undefined ? null : { biography: v.biography }),
            };
        });
}

/** @internal */
export namespace AuthorWithName$ {
    export const inboundSchema: z.ZodType<AuthorWithName, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int().optional(),
            name: z.string(),
            photo: z.string().optional(),
            biography: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.biography === undefined ? null : { biography: v.biography }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name: string;
        photo?: string | undefined;
        biography?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuthorWithName> = z
        .object({
            id: z.number().int().optional(),
            name: z.string(),
            photo: z.string().optional(),
            biography: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.photo === undefined ? null : { photo: v.photo }),
                ...(v.biography === undefined ? null : { biography: v.biography }),
            };
        });
}

/** @internal */
export namespace Author$ {
    export const inboundSchema: z.ZodType<Author, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => AuthorWithName$.inboundSchema),
        z.lazy(() => AuthorWithID$.inboundSchema),
    ]);

    export type Outbound = AuthorWithName$.Outbound | AuthorWithID$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Author> = z.union([
        z.lazy(() => AuthorWithName$.outboundSchema),
        z.lazy(() => AuthorWithID$.outboundSchema),
    ]);
}
