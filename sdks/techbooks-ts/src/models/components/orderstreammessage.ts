/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Order, Order$ } from "./order";
import * as z from "zod";

/**
 * A message in the order stream
 */
export type OrderStreamMessage = {
    id: string;
    event: string;
    data: Order;
};

/** @internal */
export namespace OrderStreamMessage$ {
    export const inboundSchema: z.ZodType<OrderStreamMessage, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            event: z.string(),
            data: z
                .string()
                .transform((v, ctx) => {
                    try {
                        return JSON.parse(v);
                    } catch (err) {
                        ctx.addIssue({
                            code: z.ZodIssueCode.custom,
                            message: `malformed json: ${err}`,
                        });
                        return z.NEVER;
                    }
                })
                .pipe(Order$.inboundSchema),
        })
        .transform((v) => {
            return {
                id: v.id,
                event: v.event,
                data: v.data,
            };
        });

    export type Outbound = {
        id: string;
        event: string;
        data: Order$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OrderStreamMessage> = z
        .object({
            id: z.string(),
            event: z.string(),
            data: Order$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                event: v.event,
                data: v.data,
            };
        });
}
