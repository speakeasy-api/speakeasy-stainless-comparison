/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FantasyBook, FantasyBook$ } from "./fantasybook";
import { ProgrammingBook, ProgrammingBook$ } from "./programmingbook";
import { SciFiBook, SciFiBook$ } from "./scifibook";
import { User, User$ } from "./user";
import * as z from "zod";

export enum Status {
    Pending = "pending",
    Shipped = "shipped",
    Delivered = "delivered",
}

export type Products =
    | (ProgrammingBook & { category: "Programming" })
    | (FantasyBook & { category: "Fantasy" })
    | (SciFiBook & { category: "Sci-fi" });

export type Order = {
    id: number;
    date: Date;
    status: Status;
    user: User;
    products: Array<
        | (ProgrammingBook & { category: "Programming" })
        | (FantasyBook & { category: "Fantasy" })
        | (SciFiBook & { category: "Sci-fi" })
    >;
};

/** @internal */
export namespace Status$ {
    export const inboundSchema = z.nativeEnum(Status);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Products$ {
    export const inboundSchema: z.ZodType<Products, z.ZodTypeDef, unknown> = z.union([
        ProgrammingBook$.inboundSchema.and(
            z
                .object({ category: z.literal("Programming") })
                .transform((v) => ({ category: v.category }))
        ),
        FantasyBook$.inboundSchema.and(
            z
                .object({ category: z.literal("Fantasy") })
                .transform((v) => ({ category: v.category }))
        ),
        SciFiBook$.inboundSchema.and(
            z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
        ),
    ]);

    export type Outbound =
        | (ProgrammingBook$.Outbound & { category: "Programming" })
        | (FantasyBook$.Outbound & { category: "Fantasy" })
        | (SciFiBook$.Outbound & { category: "Sci-fi" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Products> = z.union([
        ProgrammingBook$.outboundSchema.and(
            z
                .object({ category: z.literal("Programming") })
                .transform((v) => ({ category: v.category }))
        ),
        FantasyBook$.outboundSchema.and(
            z
                .object({ category: z.literal("Fantasy") })
                .transform((v) => ({ category: v.category }))
        ),
        SciFiBook$.outboundSchema.and(
            z.object({ category: z.literal("Sci-fi") }).transform((v) => ({ category: v.category }))
        ),
    ]);
}

/** @internal */
export namespace Order$ {
    export const inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
        .object({
            id: z.number().int(),
            date: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            status: Status$.inboundSchema,
            user: User$.inboundSchema,
            products: z.array(
                z.union([
                    ProgrammingBook$.inboundSchema.and(
                        z
                            .object({ category: z.literal("Programming") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    FantasyBook$.inboundSchema.and(
                        z
                            .object({ category: z.literal("Fantasy") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    SciFiBook$.inboundSchema.and(
                        z
                            .object({ category: z.literal("Sci-fi") })
                            .transform((v) => ({ category: v.category }))
                    ),
                ])
            ),
        })
        .transform((v) => {
            return {
                id: v.id,
                date: v.date,
                status: v.status,
                user: v.user,
                products: v.products,
            };
        });

    export type Outbound = {
        id: number;
        date: string;
        status: string;
        user: User$.Outbound;
        products: Array<
            | (ProgrammingBook$.Outbound & { category: "Programming" })
            | (FantasyBook$.Outbound & { category: "Fantasy" })
            | (SciFiBook$.Outbound & { category: "Sci-fi" })
        >;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Order> = z
        .object({
            id: z.number().int(),
            date: z.date().transform((v) => v.toISOString()),
            status: Status$.outboundSchema,
            user: User$.outboundSchema,
            products: z.array(
                z.union([
                    ProgrammingBook$.outboundSchema.and(
                        z
                            .object({ category: z.literal("Programming") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    FantasyBook$.outboundSchema.and(
                        z
                            .object({ category: z.literal("Fantasy") })
                            .transform((v) => ({ category: v.category }))
                    ),
                    SciFiBook$.outboundSchema.and(
                        z
                            .object({ category: z.literal("Sci-fi") })
                            .transform((v) => ({ category: v.category }))
                    ),
                ])
            ),
        })
        .transform((v) => {
            return {
                id: v.id,
                date: v.date,
                status: v.status,
                user: v.user,
                products: v.products,
            };
        });
}
